{"version":3,"sources":["util.js","InputTable.js","Score.js","PlayerNumber.js","App.js","reportWebVitals.js","index.js"],"names":["getContesting","numOfPlayer","team","yellow","red","eliminated","InputNumeric","number","contesting","onChange","handleChange","value","className","disabled","onClick","InputTable","data","white","numberOfPlayer","redContesting","whiteContesting","name","field","split","newData","WWSC","redScore","whiteScore","winner","getResult","ThreePoint","AttackScore","AttackDefense","Score","Array","PlayerNumber","useState","num","setNum","evt","parseInt","target","defaultValue","map","v","i","initialData","App","JSON","parse","stringify","setData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAAaA,EAAgB,SAACC,EAAaC,GACzC,OAAOD,EAAcC,EAAKC,OAASD,EAAKE,IAAMF,EAAKG,YCmD/CC,EAAe,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SASpCC,EAAe,SAACC,GACpBF,EAASE,IAWX,OACE,sBAAKC,UAAU,gFAAf,UACE,qBAAKA,UAAU,YAAf,SAA4BL,IAC5B,sBAAKK,UAAU,wCAAf,UACE,wBAAQA,UAAU,kBAAkBC,SAXlB,IAAfL,EAWiEM,QAxBzD,WACfJ,EAAaH,EAAS,IAuBlB,eACA,wBAAQK,UAAU,kBAAkBC,SARtB,IAAXN,EAQiEO,QArBzD,WACfJ,EAAaH,EAAS,IAoBlB,sBAMOQ,EAlFI,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMP,EAAe,EAAfA,SAClBL,EAA+BY,EAA/BZ,IAAKa,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,eAEdC,EAAgBnB,EAAckB,EAAgBF,EAAKZ,KACnDgB,EAAkBpB,EAAckB,EAAgBF,EAAKC,OAErDP,EAAe,SAACW,EAAMV,GAC1B,IAAMW,EAAQD,EAAKE,MAAM,KACrBC,EAAO,eAAQR,GACnBQ,EAAQF,EAAM,IAAIA,EAAM,IAAMX,EAC9BF,EAASe,IAGX,OACE,qBAAKZ,UAAU,wBAAf,SACE,wBAAOA,UAAU,oBAAjB,UACE,gCACE,+BACE,sCACA,oBAAIA,UAAU,kBAAd,sBACA,iDAGJ,kCACE,+BACE,iDACA,6BAAKO,IACL,6BAAKC,OAEP,+BACE,oBAAIR,UAAU,yBAAd,yBACA,6BAAI,cAAC,EAAD,CAAcL,OAAQH,EAAID,OAAQK,WAAYR,EAAckB,EAAgBd,GAAMK,SAAU,SAACE,GAAD,OAAWD,EAAa,aAAcC,QACtI,6BAAI,cAAC,EAAD,CAAcJ,OAAQU,EAAMd,OAAQK,WAAYR,EAAckB,EAAgBD,GAAQR,SAAU,SAACE,GAAD,OAAWD,EAAa,eAAgBC,WAE9I,+BACE,oBAAIC,UAAU,wBAAd,sBACA,6BAAI,cAAC,EAAD,CAAcL,OAAQH,EAAIA,IAAKI,WAAYR,EAAckB,EAAgBd,GAAMK,SAAU,SAACE,GAAD,OAAWD,EAAa,UAAWC,QAChI,6BAAI,cAAC,EAAD,CAAcJ,OAAQU,EAAMb,IAAKI,WAAYR,EAAckB,EAAgBD,GAAQR,SAAU,SAACE,GAAD,OAAWD,EAAa,YAAaC,WAExI,+BACE,oBAAIC,UAAU,mBAAd,wBACA,6BAAI,cAAC,EAAD,CAAcL,OAAQH,EAAIC,WAAYG,WAAYR,EAAckB,EAAgBd,GAAMK,SAAU,SAACE,GAAD,OAAWD,EAAa,iBAAkBC,QAC9I,6BAAI,cAAC,EAAD,CAAcJ,OAAQU,EAAMZ,WAAYG,WAAYR,EAAckB,EAAgBD,GAAQR,SAAU,SAACE,GAAD,OAAWD,EAAa,mBAAoBC,oBCrB1Jc,EAAO,SAAC,GAAc,IAAZT,EAAW,EAAXA,KACNZ,EAA+BY,EAA/BZ,IAAKa,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,eAEdC,EAAgBnB,EAAckB,EAAgBF,EAAKZ,KACnDgB,EAAkBpB,EAAckB,EAAgBF,EAAKC,OAErDS,EAA2B,EAAhBP,EAAiC,EAAbf,EAAID,OAAuB,EAAVC,EAAIA,IACpDuB,EAA+B,EAAlBP,EAAqC,EAAfH,EAAMd,OAAyB,EAAZc,EAAMb,IAE5DwB,EAASC,EAAUH,EAAUC,GAEnC,OACE,+BACE,sCACA,oBAAIf,UAAsB,QAAXgB,EAAmB,yBAA2B,KAA7D,SAAoEF,IACpE,oCACA,oBAAId,UAAsB,UAAXgB,EAAqB,yBAA2B,KAA/D,SAAsED,QAKtEG,EAAa,SAAC,GAAc,IAAZd,EAAW,EAAXA,KACZZ,EAA+BY,EAA/BZ,IAAKa,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,eAEdC,EAAgBnB,EAAckB,EAAgBF,EAAKZ,KACnDgB,EAAkBpB,EAAckB,EAAgBF,EAAKC,OAErDS,EAA2B,EAAhBP,EAAiC,EAAbf,EAAID,OAAuB,EAAVC,EAAIA,IACpDuB,EAA+B,EAAlBP,EAAqC,EAAfH,EAAMd,OAAyB,EAAZc,EAAMb,IAE5DwB,EAASC,EAAUH,EAAUC,GAEnC,OACE,+BACE,8DACA,oBAAIf,UAAsB,QAAXgB,EAAmB,yBAA2B,KAA7D,SAAoEF,IACpE,oCACA,oBAAId,UAAsB,UAAXgB,EAAqB,yBAA2B,KAA/D,SAAsED,QAKtEI,EAAc,SAAC,GAAc,IAAZf,EAAW,EAAXA,KACbZ,EAA+BY,EAA/BZ,IAAKa,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,eAEdC,EAAgBnB,EAAckB,EAAgBF,EAAKZ,KAGnDsB,EAA4B,EAAjBR,GAAwC,EAFjClB,EAAckB,EAAgBF,EAAKC,OAEiB,EAAfA,EAAMd,OAAyB,EAAZc,EAAMb,KAChFuB,EAA8B,EAAjBT,GAAsC,EAAhBC,EAAiC,EAAbf,EAAID,OAAuB,EAAVC,EAAIA,KAE5EwB,EAASC,EAAUH,EAAUC,GAEnC,OACE,+BACE,oBAAIf,UAAU,sCAAd,oBACA,oBAAIA,UAAsB,QAAXgB,EAAmB,yBAA2B,KAA7D,SAAoEF,IACpE,oCACA,oBAAId,UAAsB,UAAXgB,EAAqB,yBAA2B,KAA/D,SAAsED,QAKtEK,EAAgB,SAAC,GAAc,IAAZhB,EAAW,EAAXA,KACfZ,EAA+BY,EAA/BZ,IAAKa,EAA0BD,EAA1BC,MAAOC,EAAmBF,EAAnBE,eAEdC,EAAgBnB,EAAckB,EAAgBF,EAAKZ,KACnDgB,EAAkBpB,EAAckB,EAAgBF,EAAKC,OAErDS,EAA4B,EAAjBR,GAAwC,EAAlBE,EAAqC,EAAfH,EAAMd,OAAyB,EAAZc,EAAMb,MAA4B,EAAhBe,EAAiC,EAAbf,EAAID,OAAuB,EAAVC,EAAIA,KACrIuB,EAA8B,EAAjBT,GAAsC,EAAhBC,EAAiC,EAAbf,EAAID,OAAuB,EAAVC,EAAIA,MAA8B,EAAlBgB,EAAqC,EAAfH,EAAMd,OAAyB,EAAZc,EAAMb,KAEvIwB,EAASC,EAAUH,EAAUC,GAEnC,OACE,+BACE,gDACA,oBAAIf,UAAsB,QAAXgB,EAAmB,yBAA2B,KAA7D,SAAoEF,IACpE,oCACA,oBAAId,UAAsB,UAAXgB,EAAqB,yBAA2B,KAA/D,SAAsED,QAKtEE,EAAY,SAACzB,EAAKa,GACtB,OAAIb,EAAMa,EAAc,MACfA,EAAQb,EAAY,QACjB,QAGC6B,EA/GD,SAAC,GAAc,IAAZjB,EAAW,EAAXA,KACf,OACE,wBAAOJ,UAAU,oBAAjB,UACE,gCACE,+BACE,8CACA,oBAAIA,UAAU,kBAAd,sBACA,oCACA,iDAGJ,kCACE,cAAC,EAAD,CAAMI,KAAMA,IACZ,cAAC,EAAD,CAAYA,KAAMA,IAClB,cAAC,EAAD,CAAaA,KAAMA,IACnB,cAAC,EAAD,CAAeA,KAAMA,W,OCfvBf,EAAW,YAAOiC,MAAM,IAgCfC,EA9BM,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SAAe,EACf2B,mBAAS,GADM,mBAC9BC,EAD8B,KACzBC,EADyB,KAarC,OACE,sBAAK1B,UAAU,gCAAf,UACE,qBAAKA,UAAU,OAAf,8BACA,qBAAKA,UAAU,UAAf,SACE,qBAAKA,UAAU,SAAf,SACE,wBAAQH,SAfK,SAAC8B,GACpB,IAAMrB,EAAiBsB,SAASD,EAAIE,OAAO9B,MAAO,IAClD2B,EAAOpB,GACPT,EAASS,IAY6BwB,aAAc,EAA9C,SACGzC,EAAY0C,KAAI,SAACC,EAAGC,GAAJ,OAAU,iCAAiBA,EAAI,GAARA,YAI9C,qBAAKjC,UAAU,eAAf,SACE,wBAAQA,UAAU,oBAAoBE,QAfxB,WAClBL,EAAS4B,IAcL,yBCtBFS,EAAc,CAClB5B,eAAgB,EAChBd,IAAK,CACHD,OAAQ,EACRC,IAAK,EACLC,WAAY,GAEdY,MAAO,CACLd,OAAQ,EACRC,IAAK,EACLC,WAAY,IA4BD0C,MAxBf,WAAgB,IAAD,EACWX,mBAASY,KAAKC,MAAMD,KAAKE,UAAUJ,KAD9C,mBACN9B,EADM,KACAmC,EADA,KAcb,OACE,sBAAKvC,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,yBACA,cAAC,EAAD,CAAcH,SAVY,SAACF,GAE7B,IAAIiB,EAAUwB,KAAKC,MAAMD,KAAKE,UAAUJ,IACxCtB,EAAQN,eAAiBX,EACzB4C,EAAQ3B,MAON,cAAC,EAAD,CAAYR,KAAMA,EAAMP,SAfP,SAACO,GACpBmC,EAAQnC,MAeN,cAAC,EAAD,CAAOA,KAAMA,QC3BJoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3114f687.chunk.js","sourcesContent":["export const getContesting = (numOfPlayer, team) => {\n  return numOfPlayer - team.yellow - team.red - team.eliminated\n}","import { getContesting } from \"./util\";\n\nconst InputTable = ({ data, onChange }) => {\n  const { red, white, numberOfPlayer } = data;\n\n  const redContesting = getContesting(numberOfPlayer, data.red);\n  const whiteContesting = getContesting(numberOfPlayer, data.white);\n\n  const handleChange = (name, value) => {\n    const field = name.split('-')\n    let newData = { ...data }\n    newData[field[0]][field[1]] = value\n    onChange(newData)\n  }\n\n  return (\n    <div className=\"input-table-container\">\n      <table className=\"table input-table\">\n        <thead>\n          <tr>\n            <th>Ball</th>\n            <th className=\"has-text-danger\">Red Team</th>\n            <th>White Team</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Contesting Ball</td>\n            <td>{redContesting}</td>\n            <td>{whiteContesting}</td>\n          </tr>\n          <tr>\n            <td className=\"has-background-warning\">Yellow Flag</td>\n            <td><InputNumeric number={red.yellow} contesting={getContesting(numberOfPlayer, red)} onChange={(value) => handleChange(\"red-yellow\", value)} /></td>\n            <td><InputNumeric number={white.yellow} contesting={getContesting(numberOfPlayer, white)} onChange={(value) => handleChange(\"white-yellow\", value)} /></td>\n          </tr>\n          <tr>\n            <td className=\"has-background-danger\">Red Flag</td>\n            <td><InputNumeric number={red.red} contesting={getContesting(numberOfPlayer, red)} onChange={(value) => handleChange(\"red-red\", value)} /></td>\n            <td><InputNumeric number={white.red} contesting={getContesting(numberOfPlayer, white)} onChange={(value) => handleChange(\"white-red\", value)} /></td>\n          </tr>\n          <tr>\n            <td className=\"strike-out-label\">Strike Out</td>\n            <td><InputNumeric number={red.eliminated} contesting={getContesting(numberOfPlayer, red)} onChange={(value) => handleChange(\"red-eliminated\", value)} /></td>\n            <td><InputNumeric number={white.eliminated} contesting={getContesting(numberOfPlayer, white)} onChange={(value) => handleChange(\"white-eliminated\", value)} /></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nconst InputNumeric = ({ number, contesting, onChange }) => {\n  const increase = () => {\n    handleChange(number + 1)\n  }\n\n  const decrease = () => {\n    handleChange(number - 1)\n  }\n\n  const handleChange = (value) => {\n    onChange(value)\n  }\n\n  const isIncreaseDisabled = () => {\n    return contesting === 0\n  }\n\n  const isDecreaseDisabled = () => {\n    return number === 0\n  }\n\n  return (\n    <div className=\"is-flex is-flex-direction-row is-justify-content-center is-align-items-center\">\n      <div className=\"is-size-3\">{number}</div>\n      <div className=\"is-flex is-flex-direction-column pl-2\">\n        <button className=\"button is-small\" disabled={isIncreaseDisabled()} onClick={increase}>+</button>\n        <button className=\"button is-small\" disabled={isDecreaseDisabled()} onClick={decrease}>-</button>\n      </div>\n    </div>\n  )\n}\n\nexport default InputTable;\n","import { getContesting } from './util'\n\nconst Score = ({ data }) => {\n  return (\n    <table className=\"table score-table\">\n      <thead>\n        <tr>\n          <th>Point Format</th>\n          <th className=\"has-text-danger\">Red Team</th>\n          <th>vs</th>\n          <th>White Team</th>\n        </tr>\n      </thead>\n      <tbody>\n        <WWSC data={data}></WWSC>\n        <ThreePoint data={data}></ThreePoint>\n        <AttackScore data={data}></AttackScore>\n        <AttackDefense data={data}></AttackDefense>\n      </tbody>\n    </table>\n  )\n}\n\nconst WWSC = ({ data }) => {\n  const { red, white, numberOfPlayer } = data\n\n  const redContesting = getContesting(numberOfPlayer, data.red);\n  const whiteContesting = getContesting(numberOfPlayer, data.white);\n\n  const redScore = redContesting * 5 + red.yellow * 2 + red.red * 1\n  const whiteScore = whiteContesting * 5 + white.yellow * 2 + white.red * 1\n\n  const winner = getResult(redScore, whiteScore)\n\n  return (\n    <tr>\n      <td>WWSC</td>\n      <td className={winner === 'red' ? 'has-background-primary' : null}>{redScore}</td>\n      <td>vs</td>\n      <td className={winner === 'white' ? 'has-background-primary' : null}>{whiteScore}</td>\n    </tr>\n  )\n}\n\nconst ThreePoint = ({ data }) => {\n  const { red, white, numberOfPlayer } = data\n\n  const redContesting = getContesting(numberOfPlayer, data.red);\n  const whiteContesting = getContesting(numberOfPlayer, data.white);\n\n  const redScore = redContesting * 3 + red.yellow * 2 + red.red * 1\n  const whiteScore = whiteContesting * 3 + white.yellow * 2 + white.red * 1\n\n  const winner = getResult(redScore, whiteScore)\n\n  return (\n    <tr>\n      <td>3-Point Contesting Ball WWSC</td>\n      <td className={winner === 'red' ? 'has-background-primary' : null}>{redScore}</td>\n      <td>vs</td>\n      <td className={winner === 'white' ? 'has-background-primary' : null}>{whiteScore}</td>\n    </tr>\n  )\n}\n\nconst AttackScore = ({ data }) => {\n  const { red, white, numberOfPlayer } = data\n\n  const redContesting = getContesting(numberOfPlayer, data.red);\n  const whiteContesting = getContesting(numberOfPlayer, data.white);\n\n  const redScore = numberOfPlayer * 3 - (whiteContesting * 3 + white.yellow * 2 + white.red * 1)\n  const whiteScore = numberOfPlayer * 3 - (redContesting * 3 + red.yellow * 2 + red.red * 1)\n\n  const winner = getResult(redScore, whiteScore)\n\n  return (\n    <tr>\n      <td className=\"has-background-black has-text-white\">Attack</td>\n      <td className={winner === 'red' ? 'has-background-primary' : null}>{redScore}</td>\n      <td>vs</td>\n      <td className={winner === 'white' ? 'has-background-primary' : null}>{whiteScore}</td>\n    </tr>\n  )\n}\n\nconst AttackDefense = ({ data }) => {\n  const { red, white, numberOfPlayer } = data\n\n  const redContesting = getContesting(numberOfPlayer, data.red);\n  const whiteContesting = getContesting(numberOfPlayer, data.white);\n\n  const redScore = numberOfPlayer * 3 - (whiteContesting * 3 + white.yellow * 2 + white.red * 1) + (redContesting * 3 + red.yellow * 2 + red.red * 1)\n  const whiteScore = numberOfPlayer * 3 - (redContesting * 3 + red.yellow * 2 + red.red * 1) + (whiteContesting * 3 + white.yellow * 2 + white.red * 1)\n\n  const winner = getResult(redScore, whiteScore)\n\n  return (\n    <tr>\n      <td>Attack Defense</td>\n      <td className={winner === 'red' ? 'has-background-primary' : null}>{redScore}</td>\n      <td>vs</td>\n      <td className={winner === 'white' ? 'has-background-primary' : null}>{whiteScore}</td>\n    </tr>\n  )\n}\n\nconst getResult = (red, white) => {\n  if (red > white) return 'red'\n  else if (white > red) return 'white'\n  else return 'draw'\n}\n\nexport default Score;\n","import { useState } from 'react'\n\nconst numOfPlayer = [...Array(7)]\n\nconst PlayerNumber = ({ onChange }) => {\n  const [num, setNum] = useState(7)\n\n  const handleChange = (evt) => {\n    const numberOfPlayer = parseInt(evt.target.value, 10)\n    setNum(numberOfPlayer)\n    onChange(numberOfPlayer)\n  }\n\n  const handleReset = () => {\n    onChange(num)\n  }\n\n  return (\n    <div className=\"is-flex is-align-items-center\">\n      <div className=\"pr-2\">Number of Player</div>\n      <div className=\"control\">\n        <div className=\"select\">\n          <select onChange={handleChange} defaultValue={7}>\n            {numOfPlayer.map((v, i) => <option key={i}>{i + 1}</option>)}\n          </select>\n        </div>\n      </div>\n      <div className=\"buttons ml-2\">\n        <button className=\"button is-primary\" onClick={handleReset}>Reset</button>\n      </div>\n    </div >\n  )\n}\n\nexport default PlayerNumber;\n","import { useState } from 'react';\nimport './App.css';\nimport InputTable from './InputTable'\nimport Score from './Score'\nimport PlayerNumber from './PlayerNumber'\n\nconst initialData = {\n  numberOfPlayer: 7,\n  red: {\n    yellow: 0,\n    red: 0,\n    eliminated: 0\n  },\n  white: {\n    yellow: 0,\n    red: 0,\n    eliminated: 0\n  }\n}\n\nfunction App() {\n  const [data, setData] = useState(JSON.parse(JSON.stringify(initialData)))\n\n  const handleChange = (data) => {\n    setData(data)\n  }\n\n  const handlePlayerNumChange = (number) => {\n    // Reset Data\n    let newData = JSON.parse(JSON.stringify(initialData));\n    newData.numberOfPlayer = number\n    setData(newData)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title is-1\">Wiser Point</h1>\n      <PlayerNumber onChange={handlePlayerNumChange}></PlayerNumber>\n      <InputTable data={data} onChange={handleChange}></InputTable>\n      <Score data={data}></Score>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bulma/css/bulma.min.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}